BackendDTO:: Is a Data Trnsfer Object.It transfers the Data from application to DATA BASE and  from DATA BASE to Application
BcakendDAO:: DAO is Data Access Object.It shows that in what pattern the data will be stored in Data Base.
BackendDAOImpl::DAO IMPL is Data Access Object Implementation that means it will  
				implement the DAO Interface that means the calling the function and initialization 
				and storing the data in the pattern is occurs in this class. 
===========HibernateConfig class=============
Hibernaateconfig is a class for configuration of the database that we are using  in our backend tha is h2 database.
There are three annotations in the hibernate configuration
1) @Configuartion:- This  annotation indicates that the all the configuration related  material will be here in this class .
2) @ComponentScane(basepackage={""}):-It shows that all the entity classes required for this project are in this package.
3)@EnableTransactionManagement:-It will enable that all the data will be stored in the data base in the tabled form and data variable will  come from the dto classes.
    It will autometically create the query of the data base for any request which ever commanded by the user of the  software.
===========There are three Beans in the HIbernateConfig class=======
1)DataSource:-
		It will provide all the basic information of your data base in this bean.
2)SessionFactory:
		It will use DataSource and It will call the hibernateProperties method which has all required properties in this method.
Then it has the scanpackages method for the scanning the entity from that perticular package.
Method is getHibernateProperties for hibernate properties it has dialect,show_sql,show_format. 
3)HibernateTransactionManager:- It will use SessionFactory.

Junit test:
=========
	1) In this we will  change the the version of the Junit of the backend project to 4.12.
	2)Now I have added one class to backend project in src/test/java folder where the packae name is com.niit.MobileShoppingBackend.test and the class name CategoryTestCase.java
	3)we will add AnnotationConfigApplicationContext



=============
FOR PRODUCT =
=============

STEP 1:- First we need to open a product class in DTO directory of our backend project.
STEP 2:- Then will add all the private fields in the data base 
STEP 3:- Now add Getters and setters for accessing the value of the private fields
STEP 4:- Add @Entity at the above of the class so that we can indicate that this is the class that is going give the  data for our product table.
STEP 5:- Add @Id above  the private int id field to indicate that the value of the id is primary key for the database 
STEP 6:- add @GeneratedValue(strategy=GeneratiionType.IDENTITY) to increase the primary key value i.e id autometically and for the code column we need to create a randome code for that this.code="MS"+UUID.randomUUID().toString().substring(26).toUpperCase(); in the product construcrtor.
STEP 7:- Save the Product.java
STEP 8:- Create ProductDAO interface in DAO package.
STEP 9:- Then create boolean abstract methods for crud operations i.e boolean add(Product product),boolean delete(Product product) and update(Product product) note add Product class and there object as you want to name it .
STEP 10:- Create a class ProductDaoImpl in DaoImpl packaage which implements ProductDAO interface
STEP 11:- set the all the implemented method to a concrete method add hibernate query language.
step 12:- set the method dao classes as autowired.
added data table
